import { Entity, Column, PrimaryGeneratedColumn } from "typeorm";

// Some notes on this entity:
// - It represents a single row in the fhvhv_tripdata_2024-01.csv
// - The columns are based on the columns in the CSV and their data types are a best guess from the first few rows of the CSV
// - generated by chatgpt but I made everything nullable because I'm not sure if the data is clean
@Entity()
export class TripRecord {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ type: "varchar", nullable: true, length: 10 })
  hvfhs_license_num: string | null;

  @Column({ type: "varchar", nullable: true, length: 10 })
  dispatching_base_num: string | null;

  @Column({ type: "varchar", nullable: true, length: 10 })
  originating_base_num: string | null;

  @Column({ type: "timestamp", nullable: true })
  request_datetime: Date | null;

  @Column({ type: "timestamp", nullable: true })
  on_scene_datetime: Date | null;

  @Column({ type: "timestamp", nullable: true })
  pickup_datetime: Date | null;

  @Column({ type: "timestamp", nullable: true })
  dropoff_datetime: Date | null;

  @Column({ type: "varchar", nullable: true, length: 10 })
  PULocationID: string | null;

  @Column({ type: "varchar", nullable: true, length: 10 })
  DOLocationID: string | null;

  @Column({ type: "float", nullable: true })
  trip_miles: number;

  @Column({ type: "int", nullable: true })
  trip_time: number;

  @Column({ type: "float", nullable: true })
  base_passenger_fare: number;

  @Column({ type: "float", nullable: true })
  tolls: number;

  @Column({ type: "float", nullable: true })
  bcf: number;

  @Column({ type: "float", nullable: true })
  sales_tax: number;

  @Column({ type: "float", nullable: true })
  congestion_surcharge: number;

  @Column({ type: "float", nullable: true })
  airport_fee: number;

  @Column({ type: "float", nullable: true })
  tips: number;

  @Column({ type: "float", nullable: true })
  driver_pay: number;

  @Column({ type: "varchar", nullable: true, length: 1 })
  shared_request_flag: string | null;

  @Column({ type: "varchar", nullable: true, length: 1 })
  shared_match_flag: string | null;

  @Column({ type: "varchar", nullable: true, length: 1 })
  access_a_ride_flag: string | null;

  @Column({ type: "varchar", nullable: true, length: 1 })
  wav_request_flag: string | null;

  @Column({ type: "varchar", nullable: true, length: 1 })
  wav_match_flag: string | null;

  // - Main worry deserialising would be invalid strings in the date columns
  // - In about 100k rows I tested didn't encounter any invalid datestrings
  // - it's good enough to not worry for this exercice
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static fromObject(data: any): TripRecord {
    const tripRecord = new TripRecord();
    tripRecord.hvfhs_license_num = data.hvfhs_license_num;
    tripRecord.dispatching_base_num = data.dispatching_base_num;
    tripRecord.originating_base_num = data.originating_base_num;
    tripRecord.request_datetime = nullOrValidDate(data.request_datetime);
    tripRecord.on_scene_datetime = nullOrValidDate(data.on_scene_datetime);
    tripRecord.pickup_datetime = nullOrValidDate(data.pickup_datetime);
    tripRecord.dropoff_datetime = nullOrValidDate(data.dropoff_datetime);
    tripRecord.PULocationID = data.PULocationID;
    tripRecord.DOLocationID = data.DOLocationID;
    tripRecord.trip_miles = parseFloat(data.trip_miles);
    tripRecord.trip_time = parseInt(data.trip_time, 10);
    tripRecord.base_passenger_fare = parseFloat(data.base_passenger_fare);
    tripRecord.tolls = parseFloat(data.tolls);
    tripRecord.bcf = parseFloat(data.bcf);
    tripRecord.sales_tax = parseFloat(data.sales_tax);
    tripRecord.congestion_surcharge = parseFloat(data.congestion_surcharge);
    tripRecord.airport_fee = parseFloat(data.airport_fee);
    tripRecord.tips = parseFloat(data.tips);
    tripRecord.driver_pay = parseFloat(data.driver_pay);
    tripRecord.shared_request_flag = data.shared_request_flag;
    tripRecord.shared_match_flag = data.shared_match_flag;
    tripRecord.access_a_ride_flag = data.access_a_ride_flag;
    tripRecord.wav_request_flag = data.wav_request_flag;
    tripRecord.wav_match_flag = data.wav_match_flag;
    return tripRecord;
  }

  // Don't judge.
  // We are all valid when we aren't being judged :)
  // Seriously though @todo
  isValid(): boolean {
    return true;
  }
}

function nullOrValidDate(dateString: string): Date | null {
  const date = new Date(dateString);

  if (isNaN(date.getTime())) {
    return null;
  }
  return date;
}
